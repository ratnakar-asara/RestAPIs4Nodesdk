version: '2'

volumes:
  webserver_homedir:
  webserver_homedir_node_modules:
  webserver_tmp:

services:

  ca.org0.example.com:
    container_name: ca.org0.example.com
    image: hyperledger/fabric-ca:x86_64-1.0.0-alpha2
    environment:
      # TODO: change to /var/hyperledger
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
    # The `ls -1 .../*_sk` command is a hack in order to get the randomly generated filename in which
    # the private key is stored.  Not sure why the filename is random.  Maybe this is a security feature.
    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org0.example.com-cert.pem --ca.keyfile `ls -1 /etc/hyperledger/fabric-ca-server-config/*_sk` -b admin:adminpw -d'
    volumes:
      - ./generated-artifacts/crypto-config/peerOrganizations/org0.example.com/ca/:/etc/hyperledger/fabric-ca-server-config:ro
      # TODO: create persistent volume to be mounted at /etc/hyperledger/fabric-ca-server
      # QUESTION: should this be /var/hyperledger/fabric-ca-server, since its contents are likely to vary?
    # This is not necessary -- just a little self-documenting hint that this service is being offered on port 7054
    ports:
      - 7054:7054

  ca.org1.example.com:
    container_name: ca.org1.example.com
    image: hyperledger/fabric-ca:x86_64-1.0.0-alpha2
    environment:
      # TODO: change to /var/hyperledger
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
    # The `ls -1 .../*_sk` command is a hack in order to get the randomly generated filename in which
    # the private key is stored.  Not sure why the filename is random.  Maybe this is a security feature.
    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile `ls -1 /etc/hyperledger/fabric-ca-server-config/*_sk` -b admin:adminpw -d'
    volumes:
      - ./generated-artifacts/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config:ro
      # TODO: create persistent volume to be mounted at /etc/hyperledger/fabric-ca-server
      # QUESTION: should this be /var/hyperledger/fabric-ca-server, since its contents are likely to vary?
    # This is really only necessary if you want to access this service from the host.
    # Configurations within these docker-compose services should just use the native port 7054 (since
    # each service has its own IP address).  In particular, within the docker services, this
    # service is available on address ca.org1.example.com:7054
    ports:
      - 8054:7054

  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer:x86_64-1.0.0-alpha2
    environment:
      # - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LOGLEVEL=info
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      #- ORDERER_GENERAL_GENESISMETHOD=file
      ## TODO/QUESTION: Should all this be under /etc/hyperledger, since configuration stuff isn't going to change?
      #- ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      #- ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      #- ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp

      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/orderer/msp

      - ORDERER_GENERAL_TLS_ENABLED=false
      #- ORDERER_GENERAL_TLS_ENABLED=true
      #- ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/orderer/tls/server.key
      #- ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/orderer/tls/server.crt
      #- ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ./generated-artifacts/orderer.genesis.block:/etc/hyperledger/configtx/orderer.genesis.block:ro
      # TODO: Try to make this read-only, and then combine the two mount directives?
      # The msp and tls subdirs are the only subdirs, so one mount directive would
      # be equivalent as long as read-only is ok for msp.
      - ./generated-artifacts/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/etc/hyperledger/orderer/msp:ro
      #- ./generated-artifacts/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/etc/hyperledger/orderer/tls:ro
    ports:
      - 7050:7050

  peer0.org0.example.com:
    container_name: peer0.org0.example.com
    extends:
      file: source-artifacts/peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer0.org0.example.com
      - CORE_PEER_ADDRESS=peer0.org0.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org0.example.com:7051
      - CORE_PEER_LOCALMSPID=Org0MSP
      # - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
    volumes:
      - ./generated-artifacts/crypto-config/peerOrganizations/org0.example.com/peers/peer0.org0.example.com/msp:/etc/hyperledger/fabric/msp:ro
      #- ./generated-artifacts/crypto-config/peerOrganizations/org0.example.com/peers/peer0.org0.example.com/tls:/etc/hyperledger/fabric/tls:ro
    ports:
      - 7051:7051
      - 7053:7053

  peer1.org0.example.com:
    container_name: peer1.org0.example.com
    extends:
      file: source-artifacts/peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer1.org0.example.com
      - CORE_PEER_ADDRESS=peer1.org0.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org0.example.com:7051
      - CORE_PEER_LOCALMSPID=Org0MSP
      # - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
    volumes:
      - ./generated-artifacts/crypto-config/peerOrganizations/org0.example.com/peers/peer1.org0.example.com/msp:/etc/hyperledger/fabric/msp:ro
      #- ./generated-artifacts/crypto-config/peerOrganizations/org0.example.com/peers/peer1.org0.example.com/tls:/etc/hyperledger/fabric/tls:ro
    # This is really only necessary if you want to access this service from the host.
    # Configurations within these docker-compose services should just use the native ports (since
    # each service has its own IP address).  In particular, within the docker services, this
    # service is available on address peer1.org0.example.com:7051 (and 7053)
    ports:
      - 7056:7051
      - 7058:7053

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    extends:
      file: source-artifacts/peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      # - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
    volumes:
      - ./generated-artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp:ro
      #- ./generated-artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls:ro
    # This is really only necessary if you want to access this service from the host.
    # Configurations within these docker-compose services should just use the native ports (since
    # each service has its own IP address).  In particular, within the docker services, this
    # service is available on address peer0.org1.example.com:7051 (and 7053)
    ports:
      - 8051:7051
      - 8053:7053

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    extends:
      file: source-artifacts/peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      # - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      # - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
    volumes:
      - ./generated-artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp:ro
      #- ./generated-artifacts/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls:ro
    # This is really only necessary if you want to access this service from the host.
    # Configurations within these docker-compose services should just use the native ports (since
    # each service has its own IP address).  In particular, within the docker services, this
    # service is available on address peer1.org1.example.com:7051 (and 7053)
    ports:
      - 8056:7051
      - 8058:7053

# #  couchdb:
# #    image: hyperledger/fabric-couchdb:x86_64-1.0.0-alpha
# #    image: couchdb
# #    ports:
# #      - 5984:5984
# #    environment:
# #      DB_URL: http://localhost:5984/member_db

  webserver:
    container_name: webserver
    image: webserver-env:v0.0
    build:
      context: .
      dockerfile: source-artifacts/webserver-env:v0.0.Dockerfile
    working_dir: /home/minion
    environment:
      - 'HFC_LOGGING={"debug":"console"}'
    command: |
      bash -x -c "
        cp Fabric_SampleWebApp/package.json . && \
        npm install && \
        cd Fabric_SampleWebApp && \
        npm start
      "
        # nmap ca.org0.example.com -p 20-10000 && \
        # nmap ca.org1.example.com -p 20-10000 && \
        # nmap orderer.example.com -p 20-10000 && \
        # nmap peer0.org0.example.com -p 20-10000 && \
        # nmap peer1.org0.example.com -p 20-10000 && \
        # nmap peer0.org1.example.com -p 20-10000 && \
        # nmap peer1.org1.example.com -p 20-10000 && \
    ports:
      - 4000:4000
    volumes:
      # This is to contain and persist temp storage (key store)
      - webserver_tmp:/tmp:rw
      # This is to contain and persist other temp storage
      - webserver_homedir:/home/minion:rw
      # This is to contain and persist node_modules
      - webserver_homedir_node_modules:/home/minion/node_modules:rw
      # Mount this project's files
      - .:/home/minion/Fabric_SampleWebApp:ro
    depends_on:
      - ca.org0.example.com
      - ca.org1.example.com
      - orderer.example.com
      - peer0.org0.example.com
      - peer1.org0.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com

  # channel_creator:
  #   container_name: channel_creator
  #   image: hyperledger/fabric-peer:x86_64-1.0.0-alpha2
  #   environment:
  #     - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
  #   volumes:
  #     - /var/run/:/host/var/run/
  #     # Mount this project's files
  #     - .:/Fabric_SampleWebApp:ro
  #     - ./generated-artifacts/crypto-config/peerOrganizations/org0.example.com/peers/peer0.org0.example.com/msp:/etc/hyperledger/fabric/msp:ro
  #     - ./generated-artifacts/crypto-config/peerOrganizations/org0.example.com/peers/peer0.org0.example.com/tls:/etc/hyperledger/fabric/tls:ro
  #   working_dir: /Fabric_SampleWebApp
  #   command: |
  #     bash -x -c "
  #       peer channel create -o orderer.example.com:7050 -c mychannel -f generated-artifacts/mychannel.tx --tls --cafile generated-artifacts/crypto-config/ordererOrganizations/example.com/ca/ca.example.com-cert.pem && \
  #       CORE_PEER_ADDRESS=peer0.org0.example.com:7051 peer channel join -b generated-artifacts/orderer.genesis.block && \
  #       CORE_PEER_ADDRESS=peer1.org0.example.com:7051 peer channel join -b generated-artifacts/orderer.genesis.block
  #     "
  #   depends_on:
  #     - orderer.example.com
  #     - peer0.org0.example.com
  #     - peer1.org0.example.com

  #test:
    #container_name: test
    #image: webserver-env:v0.0
    #build:
      #context: .
      #dockerfile: source-artifacts/webserver-env:v0.0.Dockerfile
    #working_dir: /home/minion
    #command: |
      #bash -x -c "
        #cp Fabric_SampleWebApp/web/test/package.json . && \
        #npm install && \
        #cd Fabric_SampleWebApp/web/test && \
        #node --trace-warnings client create-channel && \
        #node --trace-warnings client install chaincode/src/chaincode v0 && \
        #node --trace-warnings client instantiate && \
        #node --trace-warnings client makepayment partyA partyB 13 && \
        #node --trace-warnings client checkbalance partyA && \
        #node --trace-warnings client checkbalance partyB
      #"
        ## nmap ca.org0.example.com -p 20-10000 && \
        ## nmap ca.org1.example.com -p 20-10000 && \
        ## nmap orderer.example.com -p 20-10000 && \
        ## nmap peer0.org0.example.com -p 20-10000 && \
        ## nmap peer1.org0.example.com -p 20-10000 && \
        ## nmap peer0.org1.example.com -p 20-10000 && \
        ## nmap peer1.org1.example.com -p 20-10000 && \
    #ports:
      #- 4000:4000
    #volumes:
      ## This is to contain and persist temp storage (key store)
      #- webserver_tmp:/tmp:rw
      ## This is to contain and persist other temp storage
      #- webserver_homedir:/home/minion:rw
      ## This is to contain and persist node_modules
      #- webserver_homedir_node_modules:/home/minion/node_modules:rw
      ## Mount this project's files
      #- .:/home/minion/Fabric_SampleWebApp:ro
    #depends_on:
      #- ca.org0.example.com
      #- ca.org1.example.com
      #- orderer.example.com
      #- peer0.org0.example.com
      #- peer1.org0.example.com
      #- peer0.org1.example.com
      #- peer1.org1.example.com


